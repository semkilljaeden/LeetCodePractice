#include "LCHeader.h"
//2:46 3:38 funny question, get a N^3 solution at first

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int count = INT_MIN;
        int node = INT_MAX;
        for (auto& x : initial) {
            if (x < node) {
                node = x;
            }
        }
        unordered_set<int> visited;
        unordered_set<int> initial_set(initial.cbegin(), initial.cend());
        for (int i = 0; i < graph.size(); i++) {
            if (visited.count(i) > 0) {
                continue;
            }
            vector<int> included;
            int tmp_count = 0;
            dfs(graph, initial_set, i, included, visited, tmp_count);
            if (included.size() == 1) {
                if (tmp_count > count) {
                    count = tmp_count;
                    node = included[0];
                }
                else if (tmp_count == count && included[0] < node) {
                    node = included[0];
                }
            }
        }
        return node;
    }


    void dfs(vector<vector<int>>& graph, unordered_set<int>& initial, int node, vector<int>& included, unordered_set<int>& visited, int& count) {
        if (visited.count(node) > 0) {
            return;
        }
        visited.insert(node);
        if (initial.count(node) > 0) {
            included.push_back(node);
        }
        count++;
        for (int i = 0; i < graph[node].size(); i++) {
            if (graph[node][i] == 1) {
                dfs(graph, initial, i, included, visited, count);
            }
        }
    }
};